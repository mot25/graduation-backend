name: Backend deploy

on:
  push:
    branches: ["master"]
#    branches: [ "prod", "dev" ]
  pull_request:
    branches: ["master"]
#    branches: [ "prod", "dev" ]

jobs:
  dev_deploy:
    runs-on: [ self-hosted, development ]
    if: endswith(github.ref, 'dev')

    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run command on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.SSH_HOST}}
          username: ${{secrets.SSH_USER}}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd ${{ secrets.PROJECT_FOLDER }};
            git restore .
            git checkout dev;
            git pull;
#            rm -rf dist;
#            npm install;
#            pm2 restart eco.config.js --env development;
#            export NVM_DIR=~/.nvm
#            source ~/.nvm/nvm.sh
#            npm install;
#            npm install pm2 -g
#            pm2 restart eco.config.js --env development;

  prod_deploy:
    runs-on: [ self-hosted, production ]
    if: endswith(github.ref, 'prod')
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run command on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.SSH_HOST}}
          username: ${{secrets.SSH_USER}}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd ${{ secrets.PROJECT_PRODUCTION_FOLDER }};
            git restore .
            git checkout prod;
            git pull;
#            rm -rf dist;
#            npm install;
#            pm2 restart eco.config.js --env production;
#            export NVM_DIR=~/.nvm
#            source ~/.nvm/nvm.sh
#            npm install;
#            npm install pm2 -g
#            pm2 restart eco.config.js --env production;

#steps:
#  - uses: actions/checkout@v3
#  - name: Use Node.js ${{ matrix.node-version }}
#    uses: actions/setup-node@v3
#    with:
#      node-version: ${{ matrix.node-version }}
#      cache: 'npm'
#  - run: npm ci
#  - run: cp ~/skimpel-api/production.env ~/skimpel-api/_work/skimpel-api/skimpel-api
#  - run: npm run build:prod
#  - run: pm2 restart skimpel-api

#docker-compose stop;
#docker-compose up --build -d;
#docker container prune -f;
